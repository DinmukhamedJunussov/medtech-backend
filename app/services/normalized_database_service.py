"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
from typing import Optional, Dict, Any, List
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from loguru import logger
import uuid

from app.models.normalized_models import Patient, TestMetadata, AnalyteResult, BloodTestResult
from app.models.database import AnalysisSession
from app.schemas.user_uploads import BloodTestResults


class NormalizedDatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_session: AsyncSession):
        self.db = db_session
    
    async def save_blood_test_results(
        self,
        blood_test_data: BloodTestResults,
        session_id: Optional[str] = None,
        source_filename: Optional[str] = None,
        user_id: Optional[str] = None
    ) -> BloodTestResult:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            blood_test_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏
            session_id: ID —Å–µ—Å—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            source_filename: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            BloodTestResult: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
        """
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
            patient = await self._create_or_get_patient(blood_test_data.patient)
            
            # 2. –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            test_metadata = await self._create_test_metadata(blood_test_data.metadata)
            
            # 3. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏
            blood_test_result = BloodTestResult(
                patient_id=patient.id,
                metadata_id=test_metadata.id,
                user_id=user_id,
                session_id=session_id,
                source_filename=source_filename,
                processing_status="completed"
            )
            
            self.db.add(blood_test_result)
            await self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–æ–≤
            
            # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏—Ç–æ–≤
            analyte_records = []
            for analyte_name, analyte_data in blood_test_data.analytes.items():
                analyte_result = AnalyteResult(
                    blood_test_result_id=blood_test_result.id,
                    analyte_name=analyte_name,
                    value=analyte_data.value,
                    unit=analyte_data.unit,
                    reference_range=analyte_data.reference_range,
                    comment=analyte_data.comment
                )
                analyte_records.append(analyte_result)
                self.db.add(analyte_result)
            
            # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SII –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            await self._calculate_sii(blood_test_result, analyte_records)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.db.commit()
            await self.db.refresh(blood_test_result)
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏: Patient ID {patient.id}, Test ID {blood_test_result.id}")
            logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–Ω–∞–ª–∏—Ç–æ–≤: {len(analyte_records)}")
            
            return blood_test_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏: {e}")
            await self.db.rollback()
            raise
    
    async def _create_or_get_patient(self, patient_info) -> Patient:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        
        Args:
            patient_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
            
        Returns:
            Patient: –û–±—ä–µ–∫—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
        """
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
        result = await self.db.execute(
            select(Patient).where(
                Patient.full_name == patient_info.full_name,
                Patient.age == patient_info.age
            )
        )
        existing_patient = result.scalar_one_or_none()
        
        if existing_patient:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ü–∏–µ–Ω—Ç: {existing_patient.full_name}")
            return existing_patient
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient = Patient(
            full_name=patient_info.full_name,
            gender=patient_info.gender,
            age=patient_info.age,
            patient_id=patient_info.patient_id
        )
        
        self.db.add(patient)
        await self.db.flush()
        
        logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç: {patient.full_name} (ID: {patient.id})")
        return patient
    
    async def _create_test_metadata(self, metadata_info) -> TestMetadata:
        """
        –°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        
        Args:
            metadata_info: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            
        Returns:
            TestMetadata: –û–±—ä–µ–∫—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        """
        test_metadata = TestMetadata(
            sample_taken_date=metadata_info.sample_taken_date,
            sample_received_date=metadata_info.sample_received_date,
            result_printed_date=metadata_info.result_printed_date,
            doctor=metadata_info.doctor,
            laboratory=metadata_info.laboratory
        )
        
        self.db.add(test_metadata)
        await self.db.flush()
        
        logger.info(f"üß™ –°–æ–∑–¥–∞–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞: {test_metadata.laboratory} (ID: {test_metadata.id})")
        return test_metadata
    
    async def _calculate_sii(self, blood_test_result: BloodTestResult, analyte_records: List[AnalyteResult]) -> None:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Systemic Immune-Inflammation Index (SII)
        
        Args:
            blood_test_result: –ó–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏
            analyte_records: –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏—Ç–æ–≤
        """
        try:
            # –ò—â–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–Ω–∞–ª–∏—Ç—ã
            neutrophils_abs = None
            lymphocytes_abs = None
            platelets = None
            
            for analyte in analyte_records:
                if analyte.analyte_name.lower() in ["–Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã (–∞–±—Å.)", "neutrophils_absolute"]:
                    neutrophils_abs = analyte.value
                elif analyte.analyte_name.lower() in ["–ª–∏–º—Ñ–æ—Ü–∏—Ç—ã (–∞–±—Å.)", "lymphocytes_absolute"]:
                    lymphocytes_abs = analyte.value
                elif analyte.analyte_name.lower() in ["—Ç—Ä–æ–º–±–æ—Ü–∏—Ç—ã", "platelets"]:
                    platelets = analyte.value
            
            if neutrophils_abs and lymphocytes_abs and platelets and lymphocytes_abs > 0:
                # SII = (Neutrophils √ó Platelets) / Lymphocytes
                sii_value = (neutrophils_abs * platelets * 1000) / lymphocytes_abs
                
                blood_test_result.sii_value = round(sii_value, 2)
                
                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è SII
                if sii_value < 500:
                    blood_test_result.sii_level = "–ù–∏–∑–∫–∏–π"
                    blood_test_result.sii_interpretation = "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è"
                elif sii_value < 1000:
                    blood_test_result.sii_level = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
                    blood_test_result.sii_interpretation = "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è"
                else:
                    blood_test_result.sii_level = "–í—ã—Å–æ–∫–∏–π"
                    blood_test_result.sii_interpretation = "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è"
                
                logger.info(f"üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω SII: {sii_value:.2f} ({blood_test_result.sii_level})")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å SII: {e}")
    
    async def get_blood_test_result_with_details(self, blood_test_id: int) -> Optional[BloodTestResult]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ –∫—Ä–æ–≤–∏ —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∞–º–∏
        
        Args:
            blood_test_id: ID –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏
            
        Returns:
            BloodTestResult: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ
        """
        try:
            result = await self.db.execute(
                select(BloodTestResult)
                .options(
                    selectinload(BloodTestResult.patient),
                    selectinload(BloodTestResult.test_metadata),
                    selectinload(BloodTestResult.analyte_results)
                )
                .where(BloodTestResult.id == blood_test_id)
            )
            
            return result.scalar_one_or_none()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏ {blood_test_id}: {e}")
            return None
    
    async def get_patient_blood_tests(self, patient_id: int, limit: int = 10) -> List[BloodTestResult]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        
        Args:
            patient_id: ID –ø–∞—Ü–∏–µ–Ω—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[BloodTestResult]: –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏
        """
        try:
            result = await self.db.execute(
                select(BloodTestResult)
                .options(
                    selectinload(BloodTestResult.test_metadata),
                    selectinload(BloodTestResult.analyte_results)
                )
                .where(BloodTestResult.patient_id == patient_id)
                .order_by(BloodTestResult.created_at.desc())
                .limit(limit)
            )
            
            return result.scalars().all()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}: {e}")
            return []
    
    async def create_analysis_session(
        self,
        filename: Optional[str] = None,
        file_type: Optional[str] = None,
        file_size: Optional[int] = None,
        user_id: Optional[str] = None
    ) -> AnalysisSession:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            file_type: –¢–∏–ø —Ñ–∞–π–ª–∞
            file_size: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            AnalysisSession: –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        """
        try:
            session = AnalysisSession(
                session_id=str(uuid.uuid4()),
                user_id=user_id,
                filename=filename,
                file_type=file_type,
                file_size=file_size,
                processing_status="processing"
            )
            
            self.db.add(session)
            await self.db.commit()
            await self.db.refresh(session)
            
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞: {session.session_id}")
            return session
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await self.db.rollback()
            raise
    
    async def update_analysis_session(
        self,
        session_id: str,
        status: str,
        blood_test_id: Optional[int] = None,
        extracted_text: Optional[str] = None,
        error_message: Optional[str] = None
    ) -> Optional[AnalysisSession]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            blood_test_id: ID –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏
            extracted_text: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            AnalysisSession: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        """
        try:
            result = await self.db.execute(
                select(AnalysisSession).where(AnalysisSession.session_id == session_id)
            )
            session = result.scalar_one_or_none()
            
            if session:
                session.processing_status = status
                if blood_test_id:
                    session.blood_test_id = blood_test_id
                if extracted_text:
                    session.extracted_text = extracted_text
                if error_message:
                    session.error_message = error_message
                
                await self.db.commit()
                await self.db.refresh(session)
                
                logger.info(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞: {session_id} -> {status}")
                return session
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await self.db.rollback()
            raise


async def get_normalized_database_service(db_session: AsyncSession) -> NormalizedDatabaseService:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        NormalizedDatabaseService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    """
    return NormalizedDatabaseService(db_session) 