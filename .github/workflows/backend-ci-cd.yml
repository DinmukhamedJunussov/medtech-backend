name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - '**'
  pull_request:
    branches: [ main ]
    paths:
      - '**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
      
      - name: Test with pytest and generate coverage
        run: |
          python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing -v
        env:
          PYTHONPATH: ${{ github.workspace }}
          SUPABASE_URL: postgresql://test:test@localhost:5432/test
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          OPENAI_API_KEY: test
          APP_SECRET: 12345678901234567890123456789012
          CORS_WHITELIST: '["http://localhost:3000"]'
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5432/test
          PORT: 8000
          LLAMA_CLOUD_API_KEY: test
          QDRANT_URL: http://localhost:6333
          QDRANT_API_KEY: test
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: 324555144366.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: medtech-backend
          IMAGE_TAG: latest
        run: |
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Force new deployment
        run: |
          aws ecs update-service --cluster medtech-cluster --service medtech-backend-service --force-new-deployment --region us-east-1 